{"version":3,"sources":["components/Header.tsx","helpers/getData.ts","components/EditForm.tsx","Constans/appURLS.ts","helpers/validateInfo.ts","components/ValidateCompany.tsx","components/MasterForm.tsx","App.tsx","index.tsx"],"names":["Header","className","getPostData","a","url","data","fetch","method","headers","redirect","referrerPolicy","body","JSON","stringify","response","json","getData","typeDocuments","label","value","EditForm","setData","isSubmitting","setIsSubmitting","useState","result","setResult","errors","setErrors","loading","setLoading","handleInputChange","target","name","handleInputChangeCheckBox","checked","useEffect","sendData","res","console","log","status","Object","keys","length","identification","identificationType","companyName","firstName","secondName","firstLastName","secondLastName","email","autorizeSendMessagesCellphone","autorizeSendMessagesEmail","Box","border","padding","margin","Grid","container","spacing","item","xs","sm","InputLabel","Select","required","error","labelId","onChange","e","fullWidth","id","map","MenuItem","TextField","disabled","type","helperText","autoComplete","FormControlLabel","control","Checkbox","color","Button","onClick","variant","values","test","validateInfo","Snackbar","open","autoHideDuration","onClose","Alert","severity","message","ValidateCompany","setId","alertMessage","setAlertMessage","handleInputClick","getInfo","errorMessages","title","CircularProgress","justify","MasterForm","Container","maxWidth","marginBottom","Typography","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1f1ac52f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport const Header = () => {\r\n  return (\r\n    <div className=\"app__header\">\r\n      <div className=\"app__header--project-name\"></div>\r\n    </div>\r\n  );\r\n};\r\n","export const getPostData = async (url = '', data: any) => {\r\n  try {\r\n    const response = await fetch(url, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      redirect: 'follow',\r\n      referrerPolicy: 'no-referrer',\r\n      body: JSON.stringify(data),\r\n    });\r\n    return response.json();\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\nexport const getData = async (url = '') => {\r\n  try {\r\n    const response = await fetch(url, {\r\n      method: 'GET',\r\n    });\r\n    return response.json();\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\n\r\nimport {\r\n  Button,\r\n  MenuItem,\r\n  Select,\r\n  InputLabel,\r\n  Checkbox,\r\n  FormControlLabel,\r\n  TextField,\r\n  Grid,\r\n  Box,\r\n  Snackbar,\r\n} from '@material-ui/core';\r\nimport { Alert } from '@material-ui/lab';\r\n\r\nimport { validateInfo } from '../helpers/validateInfo';\r\n\r\nimport { getPostData } from '../helpers/getData';\r\nimport { URLS } from '../Constans/appURLS';\r\n\r\nconst typeDocuments = [\r\n  { label: 'Cédula', value: 'C' },\r\n  { label: 'NIT', value: 'NIT' },\r\n  { label: 'Cédula extrangería', value: 'CE' },\r\n  { label: 'Tarjeta de identidad', value: 'TI' },\r\n];\r\n\r\nexport default function EditForm({\r\n  data,\r\n  setData,\r\n  isSubmitting,\r\n  setIsSubmitting,\r\n}: any) {\r\n  const [result, setResult] = useState<any>(null);\r\n  const [errors, setErrors] = useState<any>({});\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n\r\n  const handleInputChange = ({ target }: any) => {\r\n    setData({\r\n      ...data,\r\n      [target.name]: target.value,\r\n    });\r\n    setErrors({ ...errors, [target.name]: '' });\r\n  };\r\n  const handleInputChangeCheckBox = ({ target }: any) => {\r\n    setData({\r\n      ...data,\r\n      [target.name]: target.checked,\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    const sendData = async () => {\r\n      setLoading(true);\r\n      const res: any = await getPostData(URLS().getCompany, data);\r\n      console.log(`res`, res);\r\n\r\n      if (res.status) {\r\n        setResult(res);\r\n      }\r\n\r\n      setLoading(false);\r\n    };\r\n\r\n    if (Object.keys(errors).length === 0 && isSubmitting) {\r\n      sendData();\r\n    }\r\n  }, [errors, isSubmitting, data]);\r\n\r\n  const handleSubmit = () => {\r\n    setErrors(validateInfo(data));\r\n    setIsSubmitting(true);\r\n  };\r\n\r\n  const resetStates = () => {\r\n    setData(null);\r\n    setIsSubmitting(false);\r\n    setResult(null);\r\n    setErrors({});\r\n  };\r\n\r\n  const {\r\n    identification,\r\n    identificationType,\r\n    companyName,\r\n    firstName,\r\n    secondName,\r\n    firstLastName,\r\n    secondLastName,\r\n    email,\r\n    autorizeSendMessagesCellphone,\r\n    autorizeSendMessagesEmail,\r\n  } = data || {};\r\n\r\n  return (\r\n    <Box border={0.5} padding={3} margin={3}>\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={12} sm={6}>\r\n          <InputLabel>Tipo de identificación</InputLabel>\r\n          <Select\r\n            required\r\n            error={errors.identificationType}\r\n            labelId=\"label\"\r\n            name=\"identificationType\"\r\n            onChange={(e: any) => handleInputChange(e)}\r\n            fullWidth\r\n            id=\"select\"\r\n            value={identificationType && identificationType}\r\n          >\r\n            {typeDocuments.map(({ label, value }: any) => (\r\n              <MenuItem value={value}>{label}</MenuItem>\r\n            ))}\r\n          </Select>\r\n        </Grid>\r\n\r\n        <Grid item xs={12} sm={6}>\r\n          <TextField\r\n            disabled={true}\r\n            error={errors.identification}\r\n            onChange={(e: any) => handleInputChange(e)}\r\n            value={identification && identification}\r\n            id=\"identification\"\r\n            name=\"identification\"\r\n            label=\"Número identificación\"\r\n            type=\"number\"\r\n            helperText={errors.identification}\r\n          />\r\n        </Grid>\r\n\r\n        {identificationType === 'NIT' || identificationType === 'CE' ? (\r\n          <Grid item xs={12} sm={6}>\r\n            <TextField\r\n              required\r\n              error={errors.companyName}\r\n              onChange={(e: any) => handleInputChange(e)}\r\n              value={companyName && companyName}\r\n              id=\"companyName\"\r\n              name=\"companyName\"\r\n              label=\"Nombre compañia\"\r\n              helperText={errors.companyName}\r\n              fullWidth\r\n            />\r\n          </Grid>\r\n        ) : (\r\n          <>\r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                required\r\n                onChange={(e: any) => handleInputChange(e)}\r\n                value={firstName}\r\n                id=\"firstName\"\r\n                name=\"firstName\"\r\n                label=\"Primer nombre\"\r\n                fullWidth\r\n                error={errors.firstName}\r\n                helperText={errors.firstName}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                onChange={(e: any) => handleInputChange(e)}\r\n                value={secondName && secondName}\r\n                id=\"secondName\"\r\n                name=\"secondName\"\r\n                label=\"Segundo nombre\"\r\n                fullWidth\r\n                autoComplete=\"family-name\"\r\n                error={errors.secondName}\r\n                helperText={errors.secondName}\r\n              />\r\n            </Grid>\r\n\r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                required\r\n                onChange={(e: any) => handleInputChange(e)}\r\n                value={firstLastName && firstLastName}\r\n                id=\"firstLastName\"\r\n                name=\"firstLastName\"\r\n                label=\"Primer apellido\"\r\n                fullWidth\r\n                error={errors.firstLastName}\r\n                helperText={errors.firstLastName}\r\n              />\r\n            </Grid>\r\n\r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                onChange={(e: any) => handleInputChange(e)}\r\n                value={secondLastName && secondLastName}\r\n                id=\"secondLastName\"\r\n                name=\"secondLastName\"\r\n                label=\"Segundo apellido\"\r\n                error={errors.secondLastName}\r\n                helperText={errors.secondLastName}\r\n                fullWidth\r\n              />\r\n            </Grid>\r\n          </>\r\n        )}\r\n\r\n        <Grid item xs={12}>\r\n          <TextField\r\n            required\r\n            onChange={(e: any) => handleInputChange(e)}\r\n            value={email && email}\r\n            id=\"email\"\r\n            name=\"email\"\r\n            label=\"E-mail\"\r\n            fullWidth\r\n            autoComplete=\"shipping address-line1\"\r\n            error={errors.email}\r\n            helperText={errors.email}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <FormControlLabel\r\n            control={\r\n              <Checkbox\r\n                color=\"primary\"\r\n                name=\"autorizeSendMessagesCellphone\"\r\n                checked={autorizeSendMessagesCellphone}\r\n                onChange={(e) => handleInputChangeCheckBox(e)}\r\n              />\r\n            }\r\n            label=\"Autorizo ​​el envío de mensajes al celular provisto\"\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <FormControlLabel\r\n            control={\r\n              <Checkbox\r\n                color=\"primary\"\r\n                name=\"autorizeSendMessagesEmail\"\r\n                checked={autorizeSendMessagesEmail}\r\n                onChange={(e) => handleInputChangeCheckBox(e)}\r\n              />\r\n            }\r\n            label=\"Autorizo envío de mensajes al correo electrónico\"\r\n          />\r\n        </Grid>\r\n        <Grid item xs={6} sm={6}>\r\n          <Button onClick={() => resetStates()} variant=\"outlined\">\r\n            Regresar\r\n          </Button>\r\n        </Grid>\r\n        <Grid item xs={6} sm={6}>\r\n          <Button onClick={handleSubmit} variant=\"outlined\" color=\"primary\">\r\n            {loading ? `Enviando...` : `Enviar`}\r\n          </Button>\r\n        </Grid>\r\n        {result && result.status && (\r\n          <Snackbar\r\n            open={result && result.status}\r\n            autoHideDuration={3000}\r\n            onClose={() => setResult(null)}\r\n          >\r\n            <Alert severity=\"success\">{result && result.message}</Alert>\r\n          </Snackbar>\r\n        )}\r\n      </Grid>\r\n    </Box>\r\n  );\r\n}\r\n","export const URLS = () => {\r\n  return {\r\n    getValidCompany:\r\n      'https://webapireactcrud.azurewebsites.net/api/DValidCompanies/',\r\n    getCompany: 'https://webapireactcrud.azurewebsites.net/api/DCompany/',\r\n  };\r\n};\r\n","export const validateInfo = (values: any) => {\r\n  const {\r\n    identification,\r\n    identificationType,\r\n    companyName,\r\n    firstName,\r\n    secondName,\r\n    firstLastName,\r\n    secondLastName,\r\n    email,\r\n  } = values || {};\r\n\r\n  let errors: any = {};\r\n\r\n  if (!identificationType) {\r\n    errors.identificationType = 'Tipo de identificación requerida';\r\n  }\r\n\r\n  if (!identification) {\r\n    errors.identification = 'Número identificación requerida';\r\n  }\r\n\r\n  if (identificationType === 'NIT' || identificationType === 'CE') {\r\n    if (!companyName) {\r\n      errors.companyName = 'Nombre compañia requerido';\r\n    } else if (!/^[a-zA-Z \\u00C0-\\u00FF]*$/.test(companyName)) {\r\n      errors.companyName = 'Nombre compañia solo permite letras';\r\n    }\r\n  } else {\r\n    if (!firstName) {\r\n      errors.firstName = 'Primer nombre requerido';\r\n    } else if (!/^[a-zA-Z \\u00C0-\\u00FF]*$/.test(firstName)) {\r\n      errors.firstName = 'Primer nombre solo permite letras';\r\n    }\r\n\r\n    if (secondName) {\r\n      if (!/^[a-zA-Z \\u00C0-\\u00FF]*$/.test(secondName)) {\r\n        errors.secondName = 'Segundo nombre solo permite letras';\r\n      }\r\n    }\r\n\r\n    if (!firstLastName) {\r\n      errors.firstLastName = 'Primer apellido requerido';\r\n    } else if (!/^[a-zA-Z \\u00C0-\\u00FF]*$/.test(firstLastName)) {\r\n      errors.firstLastName = 'Primer apellido solo permite letras';\r\n    }\r\n\r\n    if (secondLastName) {\r\n      if (!/^[a-zA-Z \\u00C0-\\u00FF]*$/.test(secondLastName)) {\r\n        errors.secondLastName = 'Segundo apellido solo permite letras';\r\n      }\r\n    }\r\n  }\r\n\r\n  if (!email) {\r\n    errors.email = 'Correo electrónico requirido';\r\n  } else if (!/\\S+@\\S+\\.\\S+/.test(email)) {\r\n    errors.email = 'Correo electrónico no válido';\r\n  }\r\n\r\n  return errors;\r\n};\r\n","import React, { useState } from 'react';\r\nimport {\r\n  Button,\r\n  Grid,\r\n  InputLabel,\r\n  TextField,\r\n  CircularProgress,\r\n} from '@material-ui/core';\r\n\r\nimport { URLS } from '../Constans/appURLS';\r\nimport { getData } from '../helpers/getData';\r\nimport { Alert } from '@material-ui/lab';\r\n\r\nexport const ValidateCompany = ({ setData }: any) => {\r\n  const [id, setId] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const [alertMessage, setAlertMessage] = useState('');\r\n\r\n  const handleInputClick = async () => {\r\n    setAlertMessage('');\r\n    setLoading(true);\r\n    await getInfo();\r\n    setLoading(false);\r\n  };\r\n\r\n  const getInfo = async () => {\r\n    try {\r\n      const res = await getData(`${URLS().getValidCompany}${id}`);\r\n\r\n      const errorMessages = res.message\r\n        ? res.message\r\n        : res.title\r\n        ? res.title\r\n        : '';\r\n\r\n      if (errorMessages) {\r\n        setAlertMessage(errorMessages);\r\n        return;\r\n      }\r\n\r\n      const data = await getData(`${URLS().getCompany}${res.identification}`);\r\n\r\n      if (data) {\r\n        setData(data);\r\n      }\r\n    } catch (error) {}\r\n  };\r\n\r\n  return loading ? (\r\n    <CircularProgress />\r\n  ) : (\r\n    <Grid container spacing={3}>\r\n      <Grid item xs={12}>\r\n        <InputLabel>Ingresa el nit: </InputLabel>\r\n        <TextField\r\n          required\r\n          onChange={({ target }: any) => {\r\n            setId(target.value);\r\n          }}\r\n          id=\"identification\"\r\n          name=\"identification\"\r\n          label=\"NIT\"\r\n          type=\"number\"\r\n        />\r\n      </Grid>\r\n\r\n      <Grid item xs={12} justify={'flex-end'}>\r\n        <Button\r\n          disabled={!id}\r\n          onClick={handleInputClick}\r\n          variant=\"outlined\"\r\n          color=\"primary\"\r\n        >\r\n          Enviar\r\n        </Button>\r\n      </Grid>\r\n\r\n      {alertMessage && (\r\n        <Grid item xs={12} justify={'flex-end'}>\r\n          <Alert severity=\"error\">{alertMessage}</Alert>\r\n        </Grid>\r\n      )}\r\n    </Grid>\r\n  );\r\n};\r\n","import React, { useState } from 'react';\r\nimport { Container, Typography, Box } from '@material-ui/core';\r\nimport EditForm from './EditForm';\r\nimport { ValidateCompany } from './ValidateCompany';\r\n\r\nexport const MasterForm = () => {\r\n  const [data, setData] = useState(null);\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n  return (\r\n    <Container maxWidth={'sm'}>\r\n      <Box marginBottom={5}>\r\n        <Typography variant={'h4'}>CRUD Empresas</Typography>\r\n      </Box>\r\n\r\n      {data ? (\r\n        <EditForm\r\n          data={data}\r\n          setData={setData}\r\n          isSubmitting={isSubmitting}\r\n          setIsSubmitting={setIsSubmitting}\r\n        />\r\n      ) : (\r\n        <ValidateCompany setData={setData} />\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n","import React from 'react';\n\nimport { Header } from './components/Header';\nimport { MasterForm } from './components/MasterForm';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header></Header>\n      <MasterForm></MasterForm>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n\n  document.getElementById('root')\n);\n"],"sourceRoot":""}